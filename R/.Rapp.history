eigM <- eigen(M)
eigM.vals <- eigM$vals
eigM.vecs <- eigM$vec
eigM.vals
eigM <- eigen(M)
eigM
eigM.vals <- eigM$vals
eigM.vals
names(eigM)
eigM.vals <- eigM$values
eigM.vals
eigM.vecs <- eigM$vectors
matplot(eigM.vecs[,2], type="l")
matplot(eigM.vecs[,1:2], type="l")
matplot(eigM.vecs[,1:3], type="l")
matplot(eigM.vecs[,1:3], xlim=c(0,1), type="l")
matplot(x=grid.s, y =eigM.vecs[,1:3], xlim=c(0,1), type="l")
covf_cy <- function(s,t, alpha=2){#
	res <- mapply(eval_covf_cy, s=s, t=t, alpha=alpha)#
}#
#
eval_covf_cy <- function(s,t, alpha){#
	k <- 1:50#
		res <- sum(k^(-1*2*alpha)*cos(k*pi*s)*cos(k*pi*t))	#
	return(res)#
}
zs <- covf_cy(s=s, t=t)
df <- data.frame(s=s, t=t, z=zs)
zp <- ggplot(df, aes(x=s, y=t))#
zp + geom_tile(aes(fill=z)) + scale_fill_gradient(limits=c(-1.5,1.5),low="green",high="red") +#
stat_contour(aes(z=z))
M <- round(matrix(zs, nrow=len, byrow=TRUE), 5)#
image(M)#
all.equal(M, t(M))#
#
eigM <- eigen(M)#
eigM.vals <- eigM$values#
eigM.vecs <- eigM$vectors#
#
matplot(x=grid.s, y =eigM.vecs[,1:3], xlim=c(0,1), type="l")
len <- 20#
grid.s <- seq(0.01,.99, length=len)#
#
grid <- expand.grid(grid.s,grid.s)#
s <- grid[,1]#
t <- grid[,2]#
zs <- covf_cy(s=s, t=t)#
df <- data.frame(s=s, t=t, z=zs)#
#
zp <- ggplot(df, aes(x=s, y=t))#
zp + geom_tile(aes(fill=z)) + scale_fill_gradient(limits=c(-1.5,1.5),low="green",high="red") +#
stat_contour(aes(z=z))
M <- round(matrix(zs, nrow=len, byrow=TRUE), 5)#
image(M)#
all.equal(M, t(M))
eigM <- eigen(M)#
eigM.vals <- eigM$values#
eigM.vecs <- eigM$vectors
matplot(x=grid.s, y =eigM.vecs[,1:3], xlim=c(0,1), type="l")
eigM.vals
len <- 7
len <- 7#
grid.s <- seq(0.01,.99, length=len)#
#
grid <- expand.grid(grid.s,grid.s)#
s <- grid[,1]#
t <- grid[,2]#
zs <- covf_cy(s=s, t=t)#
df <- data.frame(s=s, t=t, z=zs)#
#
zp <- ggplot(df, aes(x=s, y=t))#
zp + geom_tile(aes(fill=z)) + scale_fill_gradient(limits=c(-1.5,1.5),low="green",high="red") +#
stat_contour(aes(z=z))#
# NOTE: the covariance function is a symetric function and is symmetric about the line y=x. The covariance matrix between finitely many random variables is a symetric matrix and is unchanged under transpose. The stationary axis under transpose is not y=x, but the other diagonal. #
M <- round(matrix(zs, nrow=len, byrow=TRUE), 5)#
image(M)#
all.equal(M, t(M))#
#
eigM <- eigen(M)#
eigM.vals <- eigM$values#
eigM.vecs <- eigM$vectors
eigM.vals
matplot(x=grid.s, y =eigM.vecs[,1:3], xlim=c(0,1), type="l")
length(M)
M1 <- M + rnorm(length(M), sd= 0.1)
Mstrore <- M
M <- round(matrix(zs, nrow=len, byrow=TRUE), 5)
Mstore <- M
M <- M + rnorm(length(M), sd= 0.1)
eigM <- eigen(M)#
(eigM.vals <- eigM$values)#
eigM.vecs <- eigM$vectors
M <- Mstore
M <- M + rnorm(length(M), sd= 0.1) #
M <- (M+t(M))/2
eigM <- eigen(M)#
(eigM.vals <- eigM$values)
M <- Mstore
M <- M + rnorm(length(M), sd= 0.2) #
M <- (M+t(M))/2
eigM <- eigen(M)#
(eigM.vals <- eigM$values)#
eigM.vecs <- eigM$vectors
len <- 20#
grid.s <- seq(0.01,.99, length=len)#
#
grid <- expand.grid(grid.s,grid.s)#
s <- grid[,1]#
t <- grid[,2]#
zs <- covf_cy(s=s, t=t)#
df <- data.frame(s=s, t=t, z=zs)#
#
zp <- ggplot(df, aes(x=s, y=t))#
zp + geom_tile(aes(fill=z)) + scale_fill_gradient(limits=c(-1.5,1.5),low="green",high="red") +#
stat_contour(aes(z=z))#
# NOTE: the covariance function is a symetric function and is symmetric about the line y=x. The covariance matrix between finitely many random variables is a symetric matrix and is unchanged under transpose. The stationary axis under transpose is not y=x, but the other diagonal. #
M <- round(matrix(zs, nrow=len, byrow=TRUE), 5)#
image(M)#
all.equal(M, t(M))#
#
eigM <- eigen(M)#
(eigM.vals <- eigM$values)#
eigM.vecs <- eigM$vectors
(eigM.vals <- round(eigM$values, 5))
M <- M + rnorm(length(M), sd= 0.2) #
M <- (M+t(M))/2
eigM <- eigen(M)#
(eigM.vals <- round(eigM$values, 5))#
eigM.vecs <- eigM$vectors
M <- Mstore
M <- M + rnorm(length(M), sd= 0.3) #
M <- (M+t(M))/2
eigM <- eigen(M)#
(eigM.vals <- round(eigM$values, 5))#
eigM.vecs <- eigM$vectors
M
M <- Mstore
M
len <- 7
len <- 7 #
grid.s <- seq(0.01,.99, length=len)#
#
grid <- expand.grid(grid.s,grid.s)#
s <- grid[,1]#
t <- grid[,2]#
zs <- covf_cy(s=s, t=t)#
df <- data.frame(s=s, t=t, z=zs)#
#
zp <- ggplot(df, aes(x=s, y=t))#
zp + geom_tile(aes(fill=z)) + scale_fill_gradient(limits=c(-1.5,1.5),low="green",high="red") +#
stat_contour(aes(z=z))#
# NOTE: the covariance function is a symetric function and is symmetric about the line y=x. The covariance matrix between finitely many random variables is a symetric matrix and is unchanged under transpose. The stationary axis under transpose is not y=x, but the other diagonal. #
M <- round(matrix(zs, nrow=len, byrow=TRUE), 5)#
image(M)#
all.equal(M, t(M))#
#
eigM <- eigen(M)#
(eigM.vals <- round(eigM$values, 5))#
eigM.vecs <- eigM$vectors
M <- M + rnorm(length(M), sd= 0.3) #
M <- (M+t(M))/2
eigM <- eigen(M)#
(eigM.vals <- round(eigM$values, 5))#
eigM.vecs <- eigM$vectors
steps <- 10#
sds <- seq(0,1, length=steps)
Mlist <- llply(as.list(sds), function(sd){#
	 M + rnorm(length(M), sd= sd) #
})
evals <- ldply(Mlist, function(mat){#
	round(eigen(M)$values, 5)#
})
evals
sds
evals <- ldply(Mlist, function(mat){#
	round(eigen(mat)$values, 5)#
})
evals
Mlist <- llply(as.list(sds), function(sd){#
	mat <- M + rnorm(length(M), sd= sd) #
	mat <- (mat + t(mat))/2#
})#
#
evals <- ldply(Mlist, function(mat){#
	round(eigen(mat)$values, 5)#
})
evals
junk <- melt(evals)
library(reshape)
junk <- melt(evals)
junk
evals <- ldply(Mlist, function(mat){#
	vals <- round(eigen(mat)$values, 5)#
	x <- 1:length(vals)#
	df <- data.frame(x=x, y=vals)#
})
df <- melt(evals)
df
evals
evals <- ldply(Mlist, function(mat){#
	vals <- round(eigen(mat)$values, 5)#
})
df <- melt(evals)
df
df <- data.frame(x=1:10, y=1:10)
df
df$u
is.null(df$u)
df$u <- 1
df
df$u
ls()
library(gss)
sourceDir("R")
sourceDir
sourceDir("../R")
knots = seq(0.05, 0.95, length=5)
penalized.matrix(knots)
load('file.choose')
load(file.choose())
ls()
head(cy)
covfit <- estimate_cov_function(dat = cy, n.marginal.knots = 5)
names(covfit)
covfit$knots
plot(covfit$knots)
knots <- covfit$knots
dim(knots)
mat <- penalized.matrix(knots)
dim(mat)
mat
mat <- mat*10^5
mat <- round(mat, 2)
mat
eigen(mat)
mat <- penalized.matrix(knots)
eigen(mat)
round(eigen(mat), 3)
round(eigen(mat)$values, 3)
round(eigen(mat)$values*100, 3)
head(cy)
library(ssfcov)
estimate_cov_function(dat = cy)
estimate_cov_function(dat = cy, n.marginal.knots=5)
estimate_cov_function(dat = cy, n.marginal.knots=5) -> covfit
names(covfit)
covfit$fit
?plot_covfit
plot_covfit(covfit)
library(lattice)
plot_covfit(covfit)
dev.new()
cf <- covfit
names(cf)
names(cf$fit)
cf$fit$d
cf$fit$c
cf$fit$c <- rep(0, 25)
plot_covfit(cf)
cf <- covfit
cf$fit$d <- rep(0, 4)
dev.new()
plot_covfit(cf)
covfit <- estimate_cov_function(cy, n.marginal.knots = 10)
plot_covfit(covfit)
setdev(2)
dev.set(2)
fit.unp <- covfit#
fit.unp$fit$c <- rep(0, length(covfit$fit$c))
fit.pen <- covfit#
fit.unp$fit$d <- rep(0, length(covfit$fit$d))
op <- par(mfrow=c(1,3))#
plot_covfit(covfit)#
plot_covfit(fit.unp)#
plot_covfit(fit.pen)#
par(op)
covfit$fit
names(covfit$fit)
names(covfit$fit$d)
covfit <- estimate_cov_function(cy, n.marginal.knots = 10)
covfit$fit$d
covfit$fit$c
fit.unp <- covfit#
fit.unp$fit$c <- rep(0, length(covfit$fit$c))#
fit.pen <- covfit#
fit.unp$fit$d <- rep(0, length(covfit$fit$d))
op <- par(mfrow=c(1,3))
plot(1,1)
plot_covfit(covfit)
dev.new()#
plot_covfit(fit.unp)#
dev.new()#
plot_covfit(fit.pen)
fit.unp$fit$d
fit.unp <- covfit#
fit.unp$fit$c <- rep(0, length(covfit$fit$c))#
fit.pen <- covfit#
fit.pen$fit$d <- rep(0, length(covfit$fit$d))
plot_covfit(covfit)#
dev.new()#
plot_covfit(fit.unp)#
dev.new()#
plot_covfit(fit.pen)
?wireframe
library(fields)
grid.resolution = 40
library(akima)
install.packages("akima")
library(akima)
x <- rnorm(20)#
y <- rnorm(20)#
z <- rnorm(20)#
#
s <- interp(x,y,z)
image.plot(x,y,z)
s
image.plot(s)
str(s)
grid.resolution = 40
tt <- seq(0,1, length =  grid.resolution)#
  grid <- expand.grid(t1 = tt, t2 = tt)
grid
?image.plot
plot_covfit <-#
function(fit, grid.resolution = 40, zlim=c(-1,1), image=FALSE){#
  tt <- seq(0,1, length =  grid.resolution)#
  grid <- expand.grid(t1 = tt, t2 = tt)#
  surface <- mapply(cov.fn, x = grid[,1], y=grid[,2], MoreArgs = list(knots=fit$knots, fit.obj=fit))#
  if(image = TRUE){#
  	z <- matrix(surface, nrow=length(tt), byrow=TRUE)#
  	x <- tt#
  	y <- tt#
  	image.plot(x=x, y=y, z=z)#
  }esle{#
  	wireframe(surface ~ grid[,1]*grid[,2], drape=TRUE, pretty=TRUE, scales=list(arrows=FALSE), xlab='', ylab='',zlab='', zlim=zlim)#
  }#
}
plot_covfit <-#
function(fit, grid.resolution = 40, zlim=c(-1,1), image=FALSE){#
  tt <- seq(0,1, length =  grid.resolution)#
  grid <- expand.grid(t1 = tt, t2 = tt)#
  surface <- mapply(cov.fn, x = grid[,1], y=grid[,2], MoreArgs = list(knots=fit$knots, fit.obj=fit))#
  if(image == TRUE){#
  	z <- matrix(surface, nrow=length(tt), byrow=TRUE)#
  	x <- tt#
  	y <- tt#
  	image.plot(x=x, y=y, z=z)#
  }esle{#
  	wireframe(surface ~ grid[,1]*grid[,2], drape=TRUE, pretty=TRUE, scales=list(arrows=FALSE), xlab='', ylab='',zlab='', zlim=zlim)#
  }#
}
plot_covfit <-#
function(fit, grid.resolution = 40, zlim=c(-1,1), image=FALSE){#
  tt <- seq(0,1, length =  grid.resolution)#
  grid <- expand.grid(t1 = tt, t2 = tt)#
  surface <- mapply(cov.fn, x = grid[,1], y=grid[,2], MoreArgs = list(knots=fit$knots, fit.obj=fit))#
  if(image == TRUE){#
  	z <- matrix(surface, nrow=length(tt), byrow=TRUE)#
  	x <- tt#
  	y <- tt#
  	image.plot(x=x, y=y, z=z)#
  }#
  if(image == FALSE){#
  	wireframe(surface ~ grid[,1]*grid[,2], drape=TRUE, pretty=TRUE, scales=list(arrows=FALSE), xlab='', ylab='',zlab='', zlim=zlim)#
  }#
}
plot_covfit(covfit, image=TRUE)
plot_covfit(fit.unp, image=TRUE)
plot_covfit(fit.pen, image=TRUE)
par(mfrow=c(1,3))
plot_covfit(covfit, image=TRUE)
plot_covfit(fit.unp, image=TRUE)
plot_covfit(fit.pen, image=TRUE)
k1 <-#
function(x){#
  x - 0.5#
}
k4 <-#
function(x){#
    (1/24)*(k1(x)^4 - 0.5*k1(x)^2 + 7/240)#
}
k2 <-#
function(x){#
  0.5*(k1(x)^2 - 1/12)#
}
curve(k1, from=0, to=1)
curve(k2, from=0, to=1, add=true)
curve(k2, from=0, to=1, add=TRUE)
curve(k4, from=0, to=1, add=TRUE)
curve(k4, from=0, to=1)
R1 <-#
function(s1, s2){#
    res <- k2(s1)*k2(s2) - k4(abs(s1-s2))#
}
library(akima)
xx <- expand.grid(x,x)
?expand.grid
xx <- expand.grid(x=x,y=x)
x <- seq(0,1, length=40)
xx <- expand.grid(x=x,y=x)
xx
z <- R1(s1 = xx[,1], s2= xx[,2])
df <- NULL#
df$x <- xx[,1]#
df$y <- xx[,2]#
df$z <- z
library(akima)
im <- with(df,interp(x,y,z))
with(im,image(x,y,z))
im
library(fields)
image.plot(df)
?image.plot
image.plot(df$x, df$y, df$z)
image.plot(x=df$x, y=df$y, z=df$z)
df$x
image.plot(x=x, y=x, z=df$z)
image.plot(x=im$x, y=im$x, z=im$z)
library(ssfcov2)
data(cy)
estimate_cov_function(cy, n.marginal.knots=5)
junkf <- function(s,t){#
	a <- -0.03596#
	b <- .239#
	c <- 0.239#
	d <- 2.18136#
	res <- a + b*k1(s) + c*k1(t) + d*k1(s)*k1(t)#
}
z <- junkf(s = xx[,1], st= xx[,2])
z <- junkf(s = xx[,1], t= xx[,2])
df <- NULL#
df$x <- xx[,1]#
df$y <- xx[,2]#
df$z <- z
im <- with(df,interp(x,y,z))
image.plot(x=im$x, y=im$x, z=im$z)
junkf <- function(s,t){#
	a <- -0.03596#
	b <- .239#
	c <- 0.239#
	d <- 2.18136#
	res <- a + b*s + c*t + d*s*t#
}
z <- junkf(s = xx[,1], t= xx[,2])#
df <- NULL#
df$x <- xx[,1]#
df$y <- xx[,2]#
df$z <- z
im <- with(df,interp(x,y,z))
image.plot(x=im$x, y=im$x, z=im$z)
junkf <- function(s,t){#
	a <- -0.03596#
	b <- .239#
	c <- 0.239#
	d <- -2.18136#
	res <- a + b*s + c*t + d*s*t#
}
z <- junkf(s = xx[,1], t= xx[,2])#
df <- NULL#
df$x <- xx[,1]#
df$y <- xx[,2]#
df$z <- z#
#
im <- with(df,interp(x,y,z))#
image.plot(x=im$x, y=im$x, z=im$z)
junkf <- function(s,t){#
	a <- -0.03596#
	b <- .239#
	c <- 0.239#
	d <- 0#
	res <- a + b*s + c*t + d*s*t#
}
z <- junkf(s = xx[,1], t= xx[,2])#
df <- NULL#
df$x <- xx[,1]#
df$y <- xx[,2]#
df$z <- z#
#
im <- with(df,interp(x,y,z))#
image.plot(x=im$x, y=im$x, z=im$z)
?estimate_cov_function
estimate_cov_function
ls()
data(sfdat)
ls()
head(sfdat)
sfdat$wt <- 1
head(sfdat)
length(unique(sfdat$ID))
head(sfdat, 20)
sfdat$wt <- NULL
head(sfdat, 20)
covfit <- estimate_cov_function(sfdat)
head(cy)
covfit <- estimate_cov_function(cy)
library(ssfcov2)
covfit <- estimate_cov_function(cy)
time <- c(0,1)
n.marginal.knots <- 5
tt <- min(time) + (max(time) - min(time)) * (1:n.marginal.knots)/(n.marginal.knots +#
        1)#
tt
